import { IUserRepository } from '../../../domain/repositories/IUserRepository';
import { IAuthService } from '../../../domain/services/IAuthService';
import { User } from '../../../domain/entities/User';
import { RegisterDTO } from '../../dto/RegisterDTO';

export class RegisterEmployee {
  constructor(
    private userRepository: IUserRepository,
    private authService: IAuthService
  ) {}

  async execute(registerData: RegisterDTO): Promise<{ user: User; token: string }> {
    // Check if user already exists
    const existingUser = await this.userRepository.findByEmail(registerData.email);
    if (existingUser) {
      throw new Error('User already exists with this email');
    }

    // Hash password
    const hashedPassword = await this.authService.hashPassword(registerData.password);

    // Create new user
    const user = new User(
      '', // ID will be generated by database
      registerData.name,
      registerData.email,
      hashedPassword,
      registerData.role
    );

    // Save to database
    const createdUser = await this.userRepository.create(user);

    // Generate token
    const token = this.authService.generateToken(createdUser);

    return { user: createdUser, token };
  }
}